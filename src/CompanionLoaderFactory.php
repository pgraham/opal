<?php
/*
 * Copyright (c) 2014, Philip Graham
 * All rights reserved.
 *
 * This file is part of O-pal. For the full copyright and license information
 * please view the LICENSE file that was distributed with this source code.
 */
namespace zpt\opal;

/**
 * This class creates {@link CompanionLoader} instances that load different
 * types of companions from the same PSR-4 prefixed source directory.
 *
 * @author Philip Graham <philip@zeptech.ca>
 */
class CompanionLoaderFactory
{

	private $target;
	private $loaders = [];

	public function __construct(Psr4Dir $target) {
		$this->target = $target;
	}

	/**
	 * Get a {@link CompanionLoader} for companions of the given type.
	 *
	 * Returned loader may be a cached instance. Companions need to have already
	 * been generated.
	 *
	 * @param string $type
	 *   Alias for the type of companion generated by the instance. This is used
	 *   to generate unique names for different companions of the same companioned
	 *   class.
	 */
	public function get($type) {
		if (isset($this->loaders[$type])) {
			return $this->loaders[$type];
		}
		return $this->create($director);
	}

	/**
	 * Create a {@link CompanionLoader} for companions of the given type.
	 *
	 * Companions need to have already been generated.
	 *
	 * @param string $type
	 *   Alias for the type of companion generated by the instance. This is used
	 *   to generate unique names for different companions of the same companioned
	 *   class.
	 */
	public function create($type) {
		$loader = new CompanionLoader($type, $this->target, $this);
		$this->setLoader($type, $loader);
		return $loader;
	}

	/**
	 * If a {@link CompanionLoader} is created outside of this object, it can be
	 * registered with the factory using this method.
	 *
	 * @param string $type
	 *   Alias for the type of companion generated by the instance. This is used
	 *   to generate unique names for different companions of the same companioned
	 *   class.
	 * @param CompanionLoader $loader
	 */
	public function setLoader($type, CompanionLoader $loader) {
		$this->loaders[$type] = $loader;
	}

}
